// Code generated by goyacc -p expr -o pkg/logql/expr.y.go pkg/logql/expr.y. DO NOT EDIT.

//line pkg/logql/expr.y:2
package logql

import __yyfmt__ "fmt"

//line pkg/logql/expr.y:2

import (
	"github.com/grafana/loki/pkg/logql/labelfilter"
	"github.com/prometheus/prometheus/pkg/labels"
	"time"
)

//line pkg/logql/expr.y:11
type exprSymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *logRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	RangeOp               string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	MetricExpr            SampleExpr
	VectorOp              string
	BinOpExpr             SampleExpr
	binOp                 string
	str                   string
	duration              time.Duration
	LiteralExpr           *literalExpr
	BinOpModifier         BinOpOptions
	LabelParser           *labelParserExpr
	LineFilters           *lineFilterExpr
	PipelineExpr          MultiPipelineExpr
	PipelineStage         PipelineExpr
	NumberFilter          labelfilter.Filterer
	DurationFilter        labelfilter.Filterer
	LabelFilter           labelfilter.Filterer
	LineFormatExpr        *lineFmtExpr
	LabelFormatExpr       *labelFmtExpr
	LabelFormat           labelFmt
	LabelsFormat          []labelFmt
	UnwrapExpr            *unwrapExpr
}

const IDENTIFIER = 57346
const STRING = 57347
const NUMBER = 57348
const DURATION = 57349
const RANGE = 57350
const MATCHERS = 57351
const LABELS = 57352
const EQ = 57353
const RE = 57354
const NRE = 57355
const OPEN_BRACE = 57356
const CLOSE_BRACE = 57357
const OPEN_BRACKET = 57358
const CLOSE_BRACKET = 57359
const COMMA = 57360
const DOT = 57361
const PIPE_MATCH = 57362
const PIPE_EXACT = 57363
const OPEN_PARENTHESIS = 57364
const CLOSE_PARENTHESIS = 57365
const BY = 57366
const WITHOUT = 57367
const COUNT_OVER_TIME = 57368
const RATE = 57369
const SUM = 57370
const AVG = 57371
const MAX = 57372
const MIN = 57373
const COUNT = 57374
const STDDEV = 57375
const STDVAR = 57376
const BOTTOMK = 57377
const TOPK = 57378
const BYTES_OVER_TIME = 57379
const BYTES_RATE = 57380
const BOOL = 57381
const JSON = 57382
const REGEXP = 57383
const LOGFMT = 57384
const PIPE = 57385
const LINE_FMT = 57386
const LABEL_FMT = 57387
const UNWRAP = 57388
const AVG_OVER_TIME = 57389
const SUM_OVER_TIME = 57390
const MIN_OVER_TIME = 57391
const MAX_OVER_TIME = 57392
const STDVAR_OVER_TIME = 57393
const STDDEV_OVER_TIME = 57394
const QUANTILE_OVER_TIME = 57395
const DURATION_CONV = 57396
const OR = 57397
const AND = 57398
const UNLESS = 57399
const CMP_EQ = 57400
const NEQ = 57401
const LT = 57402
const LTE = 57403
const GT = 57404
const GTE = 57405
const ADD = 57406
const SUB = 57407
const MUL = 57408
const DIV = 57409
const MOD = 57410
const POW = 57411

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"RANGE",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"DURATION_CONV",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line pkg/logql/expr.y:316

//line yacctab:1
var exprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 384

var exprAct = [...]int{

	70, 169, 53, 151, 4, 143, 177, 100, 45, 52,
	225, 61, 207, 5, 236, 118, 63, 2, 76, 66,
	56, 14, 40, 41, 42, 43, 44, 45, 243, 11,
	42, 43, 44, 45, 71, 72, 231, 6, 153, 116,
	117, 17, 18, 28, 29, 31, 32, 30, 33, 34,
	35, 36, 19, 20, 69, 91, 71, 72, 214, 106,
	226, 94, 21, 22, 23, 24, 25, 26, 27, 114,
	116, 117, 174, 145, 122, 92, 59, 103, 183, 15,
	16, 234, 120, 57, 58, 159, 154, 157, 158, 155,
	156, 109, 127, 224, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 239, 148,
	146, 144, 204, 165, 106, 165, 215, 115, 215, 108,
	160, 217, 60, 216, 126, 125, 184, 228, 145, 176,
	170, 124, 103, 179, 222, 172, 211, 173, 46, 47,
	50, 51, 48, 49, 40, 41, 42, 43, 44, 45,
	180, 181, 182, 38, 39, 46, 47, 50, 51, 48,
	49, 40, 41, 42, 43, 44, 45, 200, 119, 68,
	202, 175, 206, 91, 209, 212, 11, 94, 203, 59,
	213, 120, 210, 201, 121, 167, 57, 58, 218, 37,
	38, 39, 46, 47, 50, 51, 48, 49, 40, 41,
	42, 43, 44, 45, 111, 223, 91, 165, 11, 171,
	113, 185, 230, 91, 123, 242, 121, 110, 238, 59,
	112, 237, 11, 233, 227, 60, 57, 58, 166, 235,
	6, 224, 240, 106, 17, 18, 28, 29, 31, 32,
	30, 33, 34, 35, 36, 19, 20, 145, 204, 55,
	106, 103, 106, 199, 198, 21, 22, 23, 24, 25,
	26, 27, 205, 74, 145, 60, 168, 59, 103, 3,
	103, 59, 15, 16, 57, 58, 62, 229, 57, 58,
	75, 208, 73, 205, 146, 144, 197, 196, 59, 162,
	189, 188, 161, 187, 186, 57, 58, 171, 168, 195,
	194, 171, 144, 59, 193, 192, 191, 190, 220, 221,
	57, 58, 219, 60, 152, 150, 164, 60, 171, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 171, 60, 106, 96, 163, 162, 161,
	149, 147, 106, 95, 142, 107, 65, 241, 67, 60,
	232, 178, 67, 103, 152, 54, 101, 102, 93, 10,
	103, 9, 13, 8, 12, 7, 64, 1, 0, 0,
	0, 97, 99, 98, 0, 104, 105, 207, 97, 99,
	98, 0, 104, 105,
}
var exprPact = [...]int{

	15, -1000, 134, -1000, -1000, 206, 15, -1000, -1000, -1000,
	-1000, 344, 147, 32, -1000, 276, 257, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -21, 206, -1000, 63, 338, 340, -1000, -1000, -1000,
	-1000, 96, 68, 134, 202, 195, -1000, 58, 162, 208,
	109, 103, 102, -1000, -1000, 15, -1000, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, -1000, 339, -1000, 229, -1000, -1000, -1000, -1000, 336,
	-1000, -1000, -1000, 248, 335, 350, 27, -1000, -1000, -1000,
	-1000, -1000, 348, -1000, 334, 333, 332, 311, 205, 167,
	290, 194, 49, 153, 15, 347, 347, 97, 80, 80,
	-36, -36, -61, -61, -61, -61, -42, -42, -42, -42,
	-42, -42, -1000, 229, 248, 248, 248, -1000, 55, -1000,
	108, -1000, 200, 287, 284, 300, 298, 293, 280, 247,
	-1000, -1000, -1000, -1000, -1000, -1000, 10, 194, 166, 240,
	275, 331, 258, 113, 10, 15, 35, 100, -1000, 98,
	110, 229, 246, -1000, 310, 304, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 111, -1000, 166, -1000, -1000, 223, 6, 216, 104,
	254, -1000, -1000, 13, -1000, 346, -1000, -1000, -1000, -1000,
	-1000, -1000, 10, -1000, -1000, -1000, 59, -29, 213, 210,
	85, 10, -1000, -1000, 343, -1000, -34, -1000, -1000, 207,
	-1000, 5, -1000, -1000,
}
var exprPgo = [...]int{

	0, 367, 16, 20, 0, 6, 269, 4, 15, 7,
	366, 365, 364, 13, 363, 362, 361, 359, 280, 358,
	9, 2, 357, 356, 5, 355, 343, 336, 3, 315,
	1,
}
var exprR1 = [...]int{

	0, 1, 2, 2, 7, 7, 7, 7, 7, 6,
	6, 6, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 30, 30, 11, 11,
	11, 11, 14, 14, 14, 14, 14, 3, 3, 3,
	3, 13, 13, 13, 10, 10, 9, 9, 9, 9,
	20, 20, 21, 21, 21, 21, 21, 25, 25, 19,
	19, 19, 26, 28, 28, 29, 29, 29, 27, 24,
	24, 24, 24, 24, 24, 24, 24, 23, 23, 23,
	23, 23, 23, 23, 22, 22, 22, 22, 22, 22,
	22, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 18, 18, 17, 17,
	17, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 5, 5, 4, 4,
}
var exprR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 3, 2, 4, 3, 5, 3, 5, 3, 5,
	4, 6, 3, 4, 3, 2, 3, 6, 4, 6,
	5, 7, 4, 5, 5, 6, 7, 1, 1, 1,
	1, 3, 3, 3, 1, 3, 3, 3, 3, 3,
	1, 2, 1, 2, 2, 2, 2, 2, 3, 1,
	1, 2, 2, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 0, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 4,
}
var exprChk = [...]int{

	-1000, -1, -2, -6, -7, -13, 22, -11, -14, -16,
	-17, 14, -12, -15, 6, 64, 65, 26, 27, 37,
	38, 47, 48, 49, 50, 51, 52, 53, 28, 29,
	32, 30, 31, 33, 34, 35, 36, 55, 56, 57,
	64, 65, 66, 67, 68, 69, 58, 59, 62, 63,
	60, 61, -20, -21, -25, 43, -3, 20, 21, 13,
	59, -7, -6, -2, -10, 2, -9, 4, 22, 22,
	-4, 24, 25, 6, 6, -18, 39, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -21, -3, -19, -24, -26, -27, 40, 42, 41,
	-9, -23, -22, 22, 44, 45, 4, 5, 23, 23,
	15, 2, 18, 15, 11, 59, 12, 13, -8, 6,
	-13, 22, -7, 6, 22, 22, 22, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 5, -24, 56, 18, 55, 5, -24, 5,
	-29, -28, 4, 11, 59, 62, 63, 60, 61, 58,
	-9, 5, 5, 5, 5, 2, 23, 18, 8, -30,
	-20, 43, -13, -8, 23, 18, -7, -5, 4, -5,
	-24, -24, -24, 23, 18, 11, 7, 6, 7, 6,
	7, 6, 7, 6, 7, 6, 7, 6, 7, 6,
	-4, -8, -30, -20, 8, 8, -30, 46, 23, -30,
	-20, 23, -4, -7, 23, 18, 23, 23, -28, 2,
	4, 5, 23, -30, 8, 4, 54, 8, 23, 23,
	-30, 23, 4, -4, 22, -30, 43, 8, 8, 23,
	-4, 4, 8, 23,
}
var exprDef = [...]int{

	0, -2, 1, 2, 3, 9, 0, 4, 5, 6,
	7, 0, 0, 0, 108, 0, 0, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 10, 50, 52, 0, 0, 37, 38, 39,
	40, 3, 2, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 109, 110, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 53, 54, 55, 56, 59, 60, 0,
	69, 70, 71, 0, 0, 0, 0, 57, 8, 11,
	41, 42, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 3, 108, 0, 0, 0, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 58, 73, 0, 0, 0, 61, 0, 62,
	68, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	45, 46, 47, 48, 49, 25, 28, 0, 12, 0,
	0, 0, 0, 0, 32, 0, 3, 0, 131, 0,
	74, 75, 76, 72, 0, 0, 82, 89, 81, 88,
	77, 84, 78, 85, 79, 86, 80, 87, 83, 90,
	30, 0, 14, 22, 16, 18, 0, 0, 0, 0,
	0, 24, 34, 3, 33, 0, 133, 134, 66, 67,
	63, 64, 29, 23, 20, 26, 0, 13, 0, 0,
	0, 35, 132, 31, 0, 15, 0, 17, 19, 0,
	36, 0, 21, 27,
}
var exprTok1 = [...]int{

	1,
}
var exprTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69,
}
var exprTok3 = [...]int{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := exprPact[state]
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && exprChk[exprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || exprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := exprExca[i]
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = exprTok1[0]
		goto out
	}
	if char < len(exprTok1) {
		token = exprTok1[char]
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = exprTok2[char-exprPrivate]
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = exprTok3[i+0]
		if token == char {
			token = exprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = exprTok2[1] /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = exprPact[exprstate]
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = exprAct[exprn]
	if exprChk[exprn] == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = exprDef[exprstate]
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && exprExca[xi+1] == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = exprExca[xi+0]
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = exprExca[xi+1]
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = exprPact[exprS[exprp].yys] + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = exprAct[exprn] /* simulate a shift of "error" */
					if exprChk[exprstate] == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= exprR2[exprn]
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = exprR1[exprn]
	exprg := exprPgo[exprn]
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = exprAct[exprg]
	} else {
		exprstate = exprAct[exprj]
		if exprChk[exprstate] != -exprn {
			exprstate = exprAct[exprg]
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:95
		{
			exprlex.(*lexer).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:98
		{
			exprVAL.Expr = exprDollar[1].LogExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:99
		{
			exprVAL.Expr = exprDollar[1].MetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:103
		{
			exprVAL.MetricExpr = exprDollar[1].RangeAggregationExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:104
		{
			exprVAL.MetricExpr = exprDollar[1].VectorAggregationExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:105
		{
			exprVAL.MetricExpr = exprDollar[1].BinOpExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:106
		{
			exprVAL.MetricExpr = exprDollar[1].LiteralExpr
		}
	case 8:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:107
		{
			exprVAL.MetricExpr = exprDollar[2].MetricExpr
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:111
		{
			exprVAL.LogExpr = newMatcherExpr(exprDollar[1].Selector)
		}
	case 10:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:112
		{
			exprVAL.LogExpr = newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr)
		}
	case 11:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:113
		{
			exprVAL.LogExpr = exprDollar[2].LogExpr
		}
	case 12:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:117
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil)
		}
	case 13:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:118
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil)
		}
	case 14:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:119
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[3].UnwrapExpr)
		}
	case 15:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:120
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[5].UnwrapExpr)
		}
	case 16:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:121
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr)
		}
	case 17:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:122
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr)
		}
	case 18:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:123
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil)
		}
	case 19:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:124
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil)
		}
	case 20:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:125
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr)
		}
	case 21:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:126
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr)
		}
	case 22:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:127
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, nil)
		}
	case 23:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:128
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, exprDollar[4].UnwrapExpr)
		}
	case 24:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:129
		{
			exprVAL.LogRangeExpr = exprDollar[2].LogRangeExpr
		}
	case 26:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:134
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[3].str, "")
		}
	case 27:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:135
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[5].str, OpConvDuration)
		}
	case 28:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:139
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, nil, nil)
		}
	case 29:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:140
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, nil, &exprDollar[3].str)
		}
	case 30:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:141
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[5].Grouping, nil)
		}
	case 31:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:142
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 32:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:147
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, nil, nil)
		}
	case 33:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:148
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[4].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, nil)
		}
	case 34:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:149
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, exprDollar[5].Grouping, nil)
		}
	case 35:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:151
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, nil, &exprDollar[3].str)
		}
	case 36:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:152
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 37:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:156
		{
			exprVAL.Filter = labels.MatchRegexp
		}
	case 38:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:157
		{
			exprVAL.Filter = labels.MatchEqual
		}
	case 39:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:158
		{
			exprVAL.Filter = labels.MatchNotRegexp
		}
	case 40:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:159
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 41:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:163
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 42:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:164
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 43:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:165
		{
		}
	case 44:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:169
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 45:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:170
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 46:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:174
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 47:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:175
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 48:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:176
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 49:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:177
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 50:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:181
		{
			exprVAL.PipelineExpr = MultiPipelineExpr{exprDollar[1].PipelineStage}
		}
	case 51:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:182
		{
			exprVAL.PipelineExpr = append(exprDollar[1].PipelineExpr, exprDollar[2].PipelineStage)
		}
	case 52:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:186
		{
			exprVAL.PipelineStage = exprDollar[1].LineFilters
		}
	case 53:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:187
		{
			exprVAL.PipelineStage = exprDollar[2].LabelParser
		}
	case 54:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:188
		{
			exprVAL.PipelineStage = &labelFilterExpr{Filterer: exprDollar[2].LabelFilter}
		}
	case 55:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:189
		{
			exprVAL.PipelineStage = exprDollar[2].LineFormatExpr
		}
	case 56:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:190
		{
			exprVAL.PipelineStage = exprDollar[2].LabelFormatExpr
		}
	case 57:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:194
		{
			exprVAL.LineFilters = newLineFilterExpr(nil, exprDollar[1].Filter, exprDollar[2].str)
		}
	case 58:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:195
		{
			exprVAL.LineFilters = newLineFilterExpr(exprDollar[1].LineFilters, exprDollar[2].Filter, exprDollar[3].str)
		}
	case 59:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:198
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeJSON, "")
		}
	case 60:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:199
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeLogfmt, "")
		}
	case 61:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:200
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeRegexp, exprDollar[2].str)
		}
	case 62:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:203
		{
			exprVAL.LineFormatExpr = newLineFmtExpr(exprDollar[2].str)
		}
	case 63:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:206
		{
			exprVAL.LabelFormat = newRenameLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 64:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:207
		{
			exprVAL.LabelFormat = newTemplateLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 65:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:211
		{
			exprVAL.LabelsFormat = []labelFmt{exprDollar[1].LabelFormat}
		}
	case 66:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:212
		{
			exprVAL.LabelsFormat = append(exprDollar[1].LabelsFormat, exprDollar[3].LabelFormat)
		}
	case 68:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:216
		{
			exprVAL.LabelFormatExpr = newLabelFmtExpr(exprDollar[2].LabelsFormat)
		}
	case 69:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:219
		{
			exprVAL.LabelFilter = labelfilter.NewString(exprDollar[1].Matcher)
		}
	case 70:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:220
		{
			exprVAL.LabelFilter = exprDollar[1].DurationFilter
		}
	case 71:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:221
		{
			exprVAL.LabelFilter = exprDollar[1].NumberFilter
		}
	case 72:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:222
		{
			exprVAL.LabelFilter = exprDollar[2].LabelFilter
		}
	case 73:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:223
		{
			exprVAL.LabelFilter = labelfilter.NewAnd(exprDollar[1].LabelFilter, exprDollar[2].LabelFilter)
		}
	case 74:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:224
		{
			exprVAL.LabelFilter = labelfilter.NewAnd(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 75:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:225
		{
			exprVAL.LabelFilter = labelfilter.NewAnd(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 76:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:226
		{
			exprVAL.LabelFilter = labelfilter.NewOr(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 77:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:230
		{
			exprVAL.DurationFilter = labelfilter.NewDuration(labelfilter.FilterGreaterThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 78:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:231
		{
			exprVAL.DurationFilter = labelfilter.NewDuration(labelfilter.FilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 79:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:232
		{
			exprVAL.DurationFilter = labelfilter.NewDuration(labelfilter.FilterLesserThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 80:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:233
		{
			exprVAL.DurationFilter = labelfilter.NewDuration(labelfilter.FilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 81:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:234
		{
			exprVAL.DurationFilter = labelfilter.NewDuration(labelfilter.FilterNotEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 82:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:235
		{
			exprVAL.DurationFilter = labelfilter.NewDuration(labelfilter.FilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 83:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:236
		{
			exprVAL.DurationFilter = labelfilter.NewDuration(labelfilter.FilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 84:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:240
		{
			exprVAL.NumberFilter = labelfilter.NewNumeric(labelfilter.FilterGreaterThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 85:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:241
		{
			exprVAL.NumberFilter = labelfilter.NewNumeric(labelfilter.FilterGreaterThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 86:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:242
		{
			exprVAL.NumberFilter = labelfilter.NewNumeric(labelfilter.FilterLesserThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 87:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:243
		{
			exprVAL.NumberFilter = labelfilter.NewNumeric(labelfilter.FilterLesserThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 88:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:244
		{
			exprVAL.NumberFilter = labelfilter.NewNumeric(labelfilter.FilterNotEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 89:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:245
		{
			exprVAL.NumberFilter = labelfilter.NewNumeric(labelfilter.FilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 90:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:246
		{
			exprVAL.NumberFilter = labelfilter.NewNumeric(labelfilter.FilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 91:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:252
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("or", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 92:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:253
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("and", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 93:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:254
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("unless", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 94:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:255
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("+", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 95:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:256
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("-", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 96:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:257
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("*", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 97:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:258
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("/", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 98:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:259
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("%", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 99:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:260
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("^", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 100:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:261
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 101:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:262
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 102:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:263
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 103:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:264
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 104:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:265
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 105:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:266
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 106:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line pkg/logql/expr.y:270
		{
			exprVAL.BinOpModifier = BinOpOptions{}
		}
	case 107:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:271
		{
			exprVAL.BinOpModifier = BinOpOptions{ReturnBool: true}
		}
	case 108:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:275
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[1].str, false)
		}
	case 109:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:276
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, false)
		}
	case 110:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:277
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, true)
		}
	case 111:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:281
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 112:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:282
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 113:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:283
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 114:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:284
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 115:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:285
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 116:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:286
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 117:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:287
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 118:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:288
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 119:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:289
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 120:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:293
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 121:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:294
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 122:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:295
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 123:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:296
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 124:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:297
		{
			exprVAL.RangeOp = OpRangeTypeAvg
		}
	case 125:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:298
		{
			exprVAL.RangeOp = OpRangeTypeSum
		}
	case 126:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:299
		{
			exprVAL.RangeOp = OpRangeTypeMin
		}
	case 127:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:300
		{
			exprVAL.RangeOp = OpRangeTypeMax
		}
	case 128:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:301
		{
			exprVAL.RangeOp = OpRangeTypeStdvar
		}
	case 129:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:302
		{
			exprVAL.RangeOp = OpRangeTypeStddev
		}
	case 130:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:303
		{
			exprVAL.RangeOp = OpRangeTypeQuantile
		}
	case 131:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:308
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 132:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:309
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 133:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:313
		{
			exprVAL.Grouping = &grouping{without: false, groups: exprDollar[3].Labels}
		}
	case 134:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:314
		{
			exprVAL.Grouping = &grouping{without: true, groups: exprDollar[3].Labels}
		}
	}
	goto exprstack /* stack new state and value */
}
