// Code generated by goyacc -o pkg/logql/expr.y.go pkg/logql/expr.y. DO NOT EDIT.

//line pkg/logql/expr.y:2
package logql

import __yyfmt__ "fmt"

//line pkg/logql/expr.y:2

import (
	"github.com/prometheus/prometheus/pkg/labels"
	"time"
)

//line pkg/logql/expr.y:10
type yySymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *logRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	RangeOp               string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	MetricExpr            SampleExpr
	VectorOp              string
	BinOpExpr             SampleExpr
	binOp                 string
	str                   string
	duration              time.Duration
	LiteralExpr           *literalExpr
}

const IDENTIFIER = 57346
const STRING = 57347
const NUMBER = 57348
const DURATION = 57349
const MATCHERS = 57350
const LABELS = 57351
const EQ = 57352
const NEQ = 57353
const RE = 57354
const NRE = 57355
const OPEN_BRACE = 57356
const CLOSE_BRACE = 57357
const OPEN_BRACKET = 57358
const CLOSE_BRACKET = 57359
const COMMA = 57360
const DOT = 57361
const PIPE_MATCH = 57362
const PIPE_EXACT = 57363
const OPEN_PARENTHESIS = 57364
const CLOSE_PARENTHESIS = 57365
const BY = 57366
const WITHOUT = 57367
const COUNT_OVER_TIME = 57368
const RATE = 57369
const SUM = 57370
const AVG = 57371
const MAX = 57372
const MIN = 57373
const COUNT = 57374
const STDDEV = 57375
const STDVAR = 57376
const BOTTOMK = 57377
const TOPK = 57378
const OR = 57379
const AND = 57380
const UNLESS = 57381
const ADD = 57382
const SUB = 57383
const MUL = 57384
const DIV = 57385
const MOD = 57386
const POW = 57387

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"MATCHERS",
	"LABELS",
	"EQ",
	"NEQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"OR",
	"AND",
	"UNLESS",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line pkg/logql/expr.y:183

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	1, 2,
	23, 2,
	37, 2,
	38, 2,
	39, 2,
	40, 2,
	41, 2,
	42, 2,
	43, 2,
	44, 2,
	45, 2,
	-2, 0,
	-1, 44,
	37, 2,
	38, 2,
	39, 2,
	40, 2,
	41, 2,
	42, 2,
	43, 2,
	44, 2,
	45, 2,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 199

var yyAct = [...]int{

	52, 4, 37, 100, 48, 3, 78, 14, 43, 36,
	112, 51, 44, 53, 54, 11, 31, 32, 33, 34,
	35, 36, 108, 6, 53, 54, 97, 17, 18, 19,
	20, 22, 23, 21, 24, 25, 26, 27, 82, 109,
	109, 15, 16, 11, 111, 110, 11, 33, 34, 35,
	36, 80, 85, 81, 6, 84, 79, 68, 17, 18,
	19, 20, 22, 23, 21, 24, 25, 26, 27, 83,
	50, 98, 15, 16, 73, 104, 67, 86, 103, 66,
	90, 91, 56, 55, 89, 99, 95, 96, 88, 102,
	29, 30, 31, 32, 33, 34, 35, 36, 106, 91,
	107, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	45, 2, 38, 114, 87, 113, 92, 94, 47, 101,
	49, 42, 49, 41, 10, 42, 9, 41, 13, 8,
	39, 40, 5, 69, 39, 40, 12, 105, 71, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 92, 7,
	46, 70, 38, 1, 72, 0, 0, 42, 0, 41,
	0, 42, 0, 41, 0, 0, 39, 40, 0, 93,
	39, 40, 38, 69, 0, 38, 0, 94, 0, 0,
	0, 42, 0, 41, 42, 0, 41, 0, 0, 0,
	39, 40, 0, 39, 40, 74, 75, 76, 77,
}
var yyPact = [...]int{

	1, -1000, 64, 173, -1000, -1000, 1, -1000, -1000, -1000,
	-1000, 116, 48, -11, -1000, 77, 76, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 74, -1000, -1000,
	-1000, -1000, -1000, 34, 150, 64, 136, 59, -1000, 185,
	29, 32, 47, 33, 30, -1000, -1000, 52, -24, -24,
	5, 5, -36, -36, -36, -36, -1000, -1000, -1000, -1000,
	-1000, -1000, 118, -1000, 109, 83, 79, 75, 146, 170,
	29, 3, 53, 1, 115, 115, -1000, -1000, -1000, -1000,
	-1000, 73, -1000, -1000, -1000, 110, 114, 0, 1, -1,
	22, -1000, 21, -1000, -1000, -1000, -1000, -13, -1000, 111,
	-1000, -1000, 0, -1000, -1000,
}
var yyPgo = [...]int{

	0, 153, 110, 2, 0, 3, 5, 1, 6, 4,
	150, 149, 136, 132, 129, 128, 126, 124,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 7, 7, 7, 7, 7, 6,
	6, 6, 6, 6, 8, 8, 8, 8, 8, 11,
	14, 14, 14, 14, 14, 3, 3, 3, 3, 13,
	13, 13, 10, 10, 9, 9, 9, 9, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 17, 17, 17,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 12,
	12, 5, 5, 4, 4,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 3, 3, 2, 2, 3, 3, 3, 2, 4,
	4, 5, 5, 6, 7, 1, 1, 1, 1, 3,
	3, 3, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 4,
}
var yyChk = [...]int{

	-1000, -1, -2, -6, -7, -13, 22, -11, -14, -16,
	-17, 14, -12, -15, 6, 40, 41, 26, 27, 28,
	29, 32, 30, 31, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, -3, 2, 20,
	21, 13, 11, -7, -6, -2, -10, 2, -9, 4,
	22, 22, -4, 24, 25, 6, 6, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 5, 2, 23, 23,
	15, 2, 18, 15, 10, 11, 12, 13, -8, -6,
	22, -7, 6, 22, 22, 22, -9, 5, 5, 5,
	5, -3, 2, 23, 7, -6, -8, 23, 18, -7,
	-5, 4, -5, 5, 2, 23, -4, -7, 23, 18,
	23, 23, 23, 4, -4,
}
var yyDef = [...]int{

	0, -2, 1, -2, 3, 9, 0, 4, 5, 6,
	7, 0, 0, 0, 47, 0, 0, 59, 60, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 13, 25,
	26, 27, 28, 3, -2, 0, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 48, 49, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 10, 12, 8, 11,
	29, 30, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 3, 47, 0, 0, 0, 33, 34, 35, 36,
	37, 0, 18, 19, 14, 0, 0, 20, 0, 3,
	0, 61, 0, 15, 17, 16, 22, 3, 21, 0,
	63, 64, 23, 62, 24,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:65
		{
			exprlex.(*lexer).expr = yyDollar[1].Expr
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:68
		{
			yyVAL.Expr = yyDollar[1].LogExpr
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:69
		{
			yyVAL.Expr = yyDollar[1].MetricExpr
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:73
		{
			yyVAL.MetricExpr = yyDollar[1].RangeAggregationExpr
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:74
		{
			yyVAL.MetricExpr = yyDollar[1].VectorAggregationExpr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:75
		{
			yyVAL.MetricExpr = yyDollar[1].BinOpExpr
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:76
		{
			yyVAL.MetricExpr = yyDollar[1].LiteralExpr
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:77
		{
			yyVAL.MetricExpr = yyDollar[2].MetricExpr
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:81
		{
			yyVAL.LogExpr = newMatcherExpr(yyDollar[1].Selector)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:82
		{
			yyVAL.LogExpr = NewFilterExpr(yyDollar[1].LogExpr, yyDollar[2].Filter, yyDollar[3].str)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:83
		{
			yyVAL.LogExpr = yyDollar[2].LogExpr
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/logql/expr.y:89
		{
			yyVAL.LogRangeExpr = newLogRange(yyDollar[1].LogExpr, yyDollar[2].duration)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:90
		{
			yyVAL.LogRangeExpr = addFilterToLogRangeExpr(yyDollar[1].LogRangeExpr, yyDollar[2].Filter, yyDollar[3].str)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:91
		{
			yyVAL.LogRangeExpr = yyDollar[2].LogRangeExpr
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/logql/expr.y:96
		{
			yyVAL.RangeAggregationExpr = newRangeAggregationExpr(yyDollar[3].LogRangeExpr, yyDollar[1].RangeOp)
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/logql/expr.y:100
		{
			yyVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(yyDollar[3].MetricExpr, yyDollar[1].VectorOp, nil, nil)
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line pkg/logql/expr.y:101
		{
			yyVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(yyDollar[4].MetricExpr, yyDollar[1].VectorOp, yyDollar[2].Grouping, nil)
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line pkg/logql/expr.y:102
		{
			yyVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(yyDollar[3].MetricExpr, yyDollar[1].VectorOp, yyDollar[5].Grouping, nil)
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line pkg/logql/expr.y:104
		{
			yyVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(yyDollar[5].MetricExpr, yyDollar[1].VectorOp, nil, &yyDollar[3].str)
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line pkg/logql/expr.y:105
		{
			yyVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(yyDollar[5].MetricExpr, yyDollar[1].VectorOp, yyDollar[7].Grouping, &yyDollar[3].str)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:109
		{
			yyVAL.Filter = labels.MatchRegexp
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:110
		{
			yyVAL.Filter = labels.MatchEqual
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:111
		{
			yyVAL.Filter = labels.MatchNotRegexp
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:112
		{
			yyVAL.Filter = labels.MatchNotEqual
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:116
		{
			yyVAL.Selector = yyDollar[2].Matchers
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:117
		{
			yyVAL.Selector = yyDollar[2].Matchers
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:118
		{
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:122
		{
			yyVAL.Matchers = []*labels.Matcher{yyDollar[1].Matcher}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:123
		{
			yyVAL.Matchers = append(yyDollar[1].Matchers, yyDollar[3].Matcher)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:127
		{
			yyVAL.Matcher = mustNewMatcher(labels.MatchEqual, yyDollar[1].str, yyDollar[3].str)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:128
		{
			yyVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, yyDollar[1].str, yyDollar[3].str)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:129
		{
			yyVAL.Matcher = mustNewMatcher(labels.MatchRegexp, yyDollar[1].str, yyDollar[3].str)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:130
		{
			yyVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, yyDollar[1].str, yyDollar[3].str)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:139
		{
			yyVAL.BinOpExpr = mustNewBinOpExpr("or", yyDollar[1].Expr, yyDollar[3].Expr)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:140
		{
			yyVAL.BinOpExpr = mustNewBinOpExpr("and", yyDollar[1].Expr, yyDollar[3].Expr)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:141
		{
			yyVAL.BinOpExpr = mustNewBinOpExpr("unless", yyDollar[1].Expr, yyDollar[3].Expr)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:142
		{
			yyVAL.BinOpExpr = mustNewBinOpExpr("+", yyDollar[1].Expr, yyDollar[3].Expr)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:143
		{
			yyVAL.BinOpExpr = mustNewBinOpExpr("-", yyDollar[1].Expr, yyDollar[3].Expr)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:144
		{
			yyVAL.BinOpExpr = mustNewBinOpExpr("*", yyDollar[1].Expr, yyDollar[3].Expr)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:145
		{
			yyVAL.BinOpExpr = mustNewBinOpExpr("/", yyDollar[1].Expr, yyDollar[3].Expr)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:146
		{
			yyVAL.BinOpExpr = mustNewBinOpExpr("%", yyDollar[1].Expr, yyDollar[3].Expr)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:147
		{
			yyVAL.BinOpExpr = mustNewBinOpExpr("^", yyDollar[1].Expr, yyDollar[3].Expr)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:151
		{
			yyVAL.LiteralExpr = mustNewLiteralExpr(yyDollar[1].str, false)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/logql/expr.y:152
		{
			yyVAL.LiteralExpr = mustNewLiteralExpr(yyDollar[2].str, false)
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/logql/expr.y:153
		{
			yyVAL.LiteralExpr = mustNewLiteralExpr(yyDollar[2].str, true)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:157
		{
			yyVAL.VectorOp = OpTypeSum
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:158
		{
			yyVAL.VectorOp = OpTypeAvg
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:159
		{
			yyVAL.VectorOp = OpTypeCount
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:160
		{
			yyVAL.VectorOp = OpTypeMax
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:161
		{
			yyVAL.VectorOp = OpTypeMin
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:162
		{
			yyVAL.VectorOp = OpTypeStddev
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:163
		{
			yyVAL.VectorOp = OpTypeStdvar
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:164
		{
			yyVAL.VectorOp = OpTypeBottomK
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:165
		{
			yyVAL.VectorOp = OpTypeTopK
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:169
		{
			yyVAL.RangeOp = OpTypeCountOverTime
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:170
		{
			yyVAL.RangeOp = OpTypeRate
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/logql/expr.y:175
		{
			yyVAL.Labels = []string{yyDollar[1].str}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/logql/expr.y:176
		{
			yyVAL.Labels = append(yyDollar[1].Labels, yyDollar[3].str)
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/logql/expr.y:180
		{
			yyVAL.Grouping = &grouping{without: false, groups: yyDollar[3].Labels}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/logql/expr.y:181
		{
			yyVAL.Grouping = &grouping{without: true, groups: yyDollar[3].Labels}
		}
	}
	goto yystack /* stack new state and value */
}
